from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext

from keyboards.reply import confirm_keyboard, contact_keyboard
from keyboards.inline import confirm_data_keyboard, thank_you_keyboard 
from handlers.states import Form  


ParseMode = "HTML"
router = Router()

#start –†–µ–ø–ª–∞–π –±–∞—Ç–Ω –¥–∞ –∏ –Ω–µ—Ç 
@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await message.answer(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –≤ –Ω–∞—à—É —à–∫–æ–ª—É –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. "
        "–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç–µ—Å—å –ø—Ä–æ–±–Ω—ã–º –∑–∞–Ω—è—Ç–∏–µ–º? üìö",
        parse_mode=ParseMode,
        reply_markup=confirm_keyboard  
    )
    await state.set_state(Form.waiting_for_interest)
        
#if/else —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –î–ê
@router.message(Form.waiting_for_interest)
async def process_interest(message: Message, state: FSMContext):
    user_input = message.text.lower()
    if any(word in user_input for word in ['–¥–∞', 'yes']):
        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ! üéâ –ß—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–ª—è –≤–∞—Å –ø–æ–¥—Ö–æ–¥—è—â—É—é –≥—Ä—É–ø–ø—É –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, "
            "–ø–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–æ–π —É –≤–∞—Å —Å–µ–π—á–∞—Å —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ? "
            "–ö–∞–∫–∏–µ —Ü–µ–ª–∏ –≤—ã —Å—Ç–∞–≤–∏—Ç–µ –ø–µ—Ä–µ–¥ —Å–æ–±–æ–π? (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è —É—á–µ–±—ã, —Ä–∞–±–æ—Ç—ã, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π –∏ —Ç.–¥.) üåç"
        )
        await state.set_state(Form.waiting_for_level)
    else:
        await message.answer(
            "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞–º –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ. üòä"
        )
        await state.clear()

#reply_buttpn –¥–∞ –∏–ª–∏ –Ω–µ—Ç —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–∞
@router.message(Form.waiting_for_level)
async def process_level_and_goal(message: Message, state: FSMContext):
    level_goal = message.text
    await state.update_data(level_goal=level_goal)
    await message.answer(
        "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—à–∏–º —Ñ–æ—Ä–º–∞—Ç–æ–º –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º. "
        "–ó–∞–Ω—è—Ç–∏–µ –¥–ª–∏—Ç—Å—è 40 –º–∏–Ω—É—Ç –∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç –æ–Ω–ª–∞–π–Ω/–æ—Ñ–ª–∞–π–Ω. –í—ã –≥–æ—Ç–æ–≤—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è? üìù",
        reply_markup=confirm_keyboard
    )
    await state.set_state(Form.waiting_for_confirmation)

#–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ reply_button
@router.message(Form.waiting_for_confirmation)
async def process_confirmation(message: Message, state: FSMContext):
    user_input = message.text.lower()
    if any(word in user_input for word in ['–¥–∞', 'yes']):
        await message.answer(
            "–Ø –∑–∞–ø–∏—Å–∞–ª–∞ –≤–∞—Å –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ. üéâ –ú–æ–≥—É —è —É—Ç–æ—á–Ω–∏—Ç—å –≤–∞—à–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è? üì≤",
            reply_markup=contact_keyboard
        )
        await state.set_state(Form.waiting_for_name_and_phone)
    else:
        await message.answer("–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –º—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ. üòå")
        await state.clear()


@router.message(Form.waiting_for_name_and_phone)
async def process_name_and_phone(message: Message, state: FSMContext):
    if message.contact:
        contact_info = {
            "phone_number": message.contact.phone_number,
            "first_name": message.contact.first_name,
            "user_id": message.contact.user_id,
        }
        await state.update_data(contact_info=contact_info)
        await message.answer(
            "–°–ø–∞—Å–∏–±–æ! –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç ‚úÖ",
            reply_markup=confirm_data_keyboard
        )
        await state.clear()
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üì≤.")


@router.message(StateFilter(None))
async def fallback_handler(message: Message):
    return


@router.callback_query(F.data == "confirm_data")
async def on_confirm_data(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏. üôè")
    await callback.message.answer("–ú—ã –±–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –∑–∞—è–≤–∫—É! üéâ", reply_markup=thank_you_keyboard)  
    await state.clear()

@router.callback_query(F.data == "edit_data")
async def on_edit_data(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–•–æ—Ä–æ—à–æ, –Ω–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –µ—â—ë —Ä–∞–∑. ‚úçÔ∏è")
    await state.set_state(Form.waiting_for_name_and_phone)
